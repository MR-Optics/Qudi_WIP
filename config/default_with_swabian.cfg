#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    pulsestreamer:
       module.Class: 'swabian_instruments.pulse_streamer_with_waveform_memory.PulseStreamer'
       pulsestreamer_ip: '169.254.8.2'
       laser_channel: 0
       uw_x_channel: 2

    timetagger_counter:
        module.Class: 'swabian_instruments.timetagger_fast_and_slow_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 1
        #timetagger_channel_apd_1: 2
        timetagger_channel_detect: 2
        timetagger_channel_sync: 3
        timetagger_channel_begin: 4
        #timetagger_sum_channels: 5
        #choose_trace: True
        #gated: False


    #nicard_6323:
        #module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        #photon_sources:
        #    - '/Dev1/PFI8'
        #    - '/Dev1/PFI9'
        #clock_channel: '/Dev1/Ctr0'
        #default_clock_frequency: 100 # optional, in Hz
        #counter_channels:
        #    - '/Dev1/Ctr1'
        #counter_ai_channels:
        #    - '/Dev1/AI0'
        #counter_voltage_range: [-10, 10]
        #default_scanner_clock_frequency: 100 # optional, in Hz
        #scanner_clock_channel: '/Dev1/Ctr2'
        #pixel_clock_channel: '/Dev1/PFI9'
        #scanner_ao_channels:
        #    - '/Dev1/AO0'
        #    - '/Dev1/AO1'
        #    - '/Dev1/AO2'
        #scanner_counter_channels:
        #    - '/Dev1/Ctr3'
        #scanner_voltage_ranges:
        #    - [-10, 10]
        #    - [-10, 10]
        #    - [-10, 10]
        #scanner_position_ranges:
        #    - [-100e-6, 100e-6]
        #    - [-100e-6, 100e-6]
        #    - [-10e-6, 10e-6]
        #odmr_trigger_channel: '/Dev1/PFI12'
        #gate_in_channel: '/Dev1/PFI9'
        #default_samples_number: 50
        #max_counts: 3e7
        #read_write_timeout: 10
        #counting_edge_rising: True



    mw_source_agilent:
        module.Class: 'microwave.mw_source_agilent.MicrowaveAgilent'
        usb_address: 'TCPIP0::169.254.9.16::inst0::INSTR'
        #usb_address: 'USB0::0x0957::0x1F01::MY50140880::0::INSTR'
        usb_timeout: 1000

    aptcontroller_4axis:
        module.Class: 'motor.aptmotor.APTStage'
        dll_path: 'C:\\Program Files\\Thorlabs\\APT\\APT Server\\APT.dll'
        axis_labels:
            - x
            - y
            - z
            - phi
        x:
            hw_type: 'BBD10X'
            serial_num: 90857626
            unit: 'm'
            pitch: 1
            constraints:
                pos_min: 0.0
                pos_max: 0.150
                vel_min: 0.0
                vel_max: 0.004
                acc_min: 0.0
                acc_max: 0.005
                unit: 'm'
        y:
            hw_type: 'BBD10X'
            serial_num: 90857627
            unit: 'm'
            pitch: 1
            constraints:
                pos_min: 0
                pos_max: 0.150
                vel_min: 0.0
                vel_max: 0.004
                acc_min: 0.0
                acc_max: 0.005
                unit: 'm'
        z:
            hw_type: 'BBD10X'
            serial_num: 90857625
            unit: 'mm'
            pitch: 1
            constraints:
                pos_min: 0.0
                pos_max: 0.150
                vel_min: 0.0
                vel_max: 0.004
                acc_min: 0.0
                acc_max: 0.005
                unit: 'm'
        phi:
            hw_type: 'TST001'
            serial_num: 83860367
            unit: 'degree'
            pitch: 7.5
            constraints:
                pos_min: 0
                pos_max: 360
                vel_min: 0.0
                vel_max: 4.0
                acc_min: 0
                acc_max: 4
                unit: 'degree'

    simpledatadummy:
        module.Class: 'simple_data_dummy.SimpleDummy'

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        usb_address: 'dummy'
        usb_timeout: 100

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        pixel_clock_channel: '/Dev1/PFI6'
        connect:
            fitlogic: 'fitlogic'

    mydummycounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        source_channels: 4
        clock_frequency: 100
        count_distribution: 'dark_bright_poisson'
        remoteaccess: True

    mydummyodmrcounter:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100
        number_of_channels: 3
        connect:
            fitlogic: 'fitlogic'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        #choose_trace: True
        #gated: False

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    mydummywavemeter:
        module.Class: 'wavemeter_dummy.WavemeterDummy'
        measurement_timing: 10

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    myspectrometer:
        module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
        connect:
            fitlogic: 'fitlogic'

    motordummy:
        module.Class: 'motor.motor_dummy.MotorDummy'

    magnetdummy:
        module.Class: 'magnet.magnet_dummy.MagnetDummy'

    processdummy:
        module.Class: 'process_dummy.ProcessDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

    cameradummy:
        module.Class: 'camera.camera_dummy.CameraDummy'
logic:
    simpledatalogic:
        module.Class: 'simple_data_logic.SimpleDataLogic'
        connect:
            simpledata: 'simpledatadummy'

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        connect:
            process: 'processdummy'
            control: 'processdummy'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
            savelogic: 'savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequence_pulser_logic:
        module.Class: 'pulsed.sequence_logic_for_pulser.SequenceLogicForPulser'
        connect:
            pulsegenerator: 'pulsestreamer'
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic_swabian.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'sequence_pulser_logic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'timetagger_counter'
            pulsegenerator: 'sequence_pulser_logic'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            #microwave: 'mw_source_agilent'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'timetagger_counter'
            savelogic: 'savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter'
            savelogic: 'savelogic'

    wavemeterloggerlogic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'mydummywavemeter'
            savelogic: 'savelogic'
            counterlogic: 'counterlogic'
            fitlogic: 'fitlogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'mydummyswitch1'
            switch2: 'mydummyswitch2'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_external_counter_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'mydummyscanner'

    scanner_external_counter_interfuse:
        module.Class: 'interfuse.confocal_scanner_with_timetagger.ScannerInterfuse'
        connect:
            confocalscanner1: 'mydummyscanner'
            slowcounter: 'timetagger_counter'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
           confocalscanner1: 'scanner_external_counter_interfuse'
           fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimiserlogic: 'optimizerlogic'
            savelogic: 'savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_swabian_microwave_trigger_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'odmr_swabian_microwave_trigger_interfuse'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'

    odmr_counter_swabian_instruments:
        module.Class: 'interfuse.odmr_counter_swabian_instruments.ODMRCounterSwabianInstruments'
        connect:
            timetagger: 'timetagger_counter'
            pulse_streamer: 'pulsestreamer'

    odmr_swabian_microwave_trigger_interfuse:
        module.Class: 'interfuse.odmr_swabian_microwave_trigger_interfuse.ODMRCounterSwabianInstruments'
        connect:
            timetagger: 'timetagger_counter'
            pulse_streamer: 'pulsestreamer'
            microwave1: 'mw_source_agilent'

    # this interfuse enables odmr if hardware trigger is not available or if
    # the counter has only two channels:
    odmr_counter_microwave_interfuse:
        module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
        connect:
            slowcounter: 'timetagger_counter'
            microwave: 'mw_source_agilent'
            pulse_streamer: 'pulsestreamer'

    # this oder logic runs now with the interfuse
    odmrlogic2:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_microwave_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'odmr_counter_microwave_interfuse'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'

    laserscannerlogic:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'mydummyscanner'
            savelogic: 'savelogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'
        #additional_fit_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
        #    scannerLocationRefocus:
        #        module: 'refocus'
        #        preposttasks: ['fliplasermirror']
        #        pausetasks: ['scan', 'odmr']
        #        needsmodules:
        #            optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'myspectrometer'
            savelogic: 'savelogic'
            odmrlogic: 'odmrlogic' # optional
            fitlogic: 'fitlogic'

    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnet_motor_interfuse'
            optimizerlogic: 'optimizerlogic'
            counterlogic: 'counterlogic'
            odmrlogic: 'odmrlogic2'
            savelogic: 'savelogic'
            scannerlogic: 'scannerlogic'
            traceanalysis: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_interfuse.MagnetMotorInterfuse'
        connect:
            motorstage: 'aptcontroller_4axis'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    qdplotlogic:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic'

    nuopslogic:
        module.Class: 'nuclear_operations_logic.NuclearOperationsLogic'
        connect:
            sequencegenerationlogic: 'sequencegeneratorlogic'
            traceanalysislogic: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            odmrlogic: 'odmrlogic'
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'laserdummy'

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            hardware: 'cameradummy'
            savelogic: 'savelogic'

gui:
    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    pulsestreamer_output:
        module.Class: 'pulsestreamer.pulsestreamergui.pulsestreamerGui'
        connect:
            pulsestreamer: 'sequence_pulser_logic'

    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic2'
            savelogic: 'savelogic'

    wavemeterlogger:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'wavemeterloggerlogic'
            savelogic: 'savelogic'

    switches:
        module.Class: 'switcher.switchgui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    automation:
        module.Class: 'automation.automationgui.AutomationGui'
        connect:
            automationlogic: 'automationlogic'

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrumlogic'

    simpledata:
        module.Class: 'simpledatagui.simpledatagui.SimpleDataGui'
        connect:
            simplelogic: 'simpledatalogic'

    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnet_logic'
            savelogic: 'savelogic'

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'
            traceanalysislogic1: 'trace_analysis_logic'

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pidlogic'

    errortest:
        module.Class: 'testgui.TestGui'
        text: 'Random text from config'
        error: 'This config is required!'

    qdplotter:
        module.Class: 'qdplotter.qdplottergui.QdplotterGui'
        connect:
            qdplotlogic1: 'qdplotlogic'

    nuclearops:
        module.Class: 'nuclear_operations.nuclear_operations.NuclearOperationsGui'
        connect:
            nuclearoperationslogic: 'nuopslogic'
            savelogic: 'savelogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    laserscanner:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic'
            savelogic: 'savelogic'

    # Gui to test the dummy counting
    odmrgui_program_trigger:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic2'
            savelogic: 'savelogic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGUI'
        connect:
            camera_logic: 'camera_logic'
            savelogic: 'savelogic'
